#include <iostream>
#include <fstream>
#include <vector>
#include <ctime>
#include <cmath>
#include "RandomForestRegressor.h" // Assuming RandomForestRegressor class is defined elsewhere

using namespace std;

struct RideData {
    int hr;
    int dow;
    bool wknd;
    float temp;
    int weather;
    float requests;
};

int main() {
    // Step 1: Load data
    vector<RideData> data;
    ifstream file("ride_requests.csv");
    if (!file.is_open()) {
        cerr << "Error opening file." << endl;
        return 1;
    }
    
    RideData entry;
    while (file >> entry.hr >> entry.dow >> entry.wknd >> entry.temp >> entry.weather >> entry.requests) {
        data.push_back(entry);
    }
    file.close();

    // Step 2: Train and evaluate model
    RandomForestRegressor model(100, 42); // Assuming RandomForestRegressor is defined with n_estimators and random_state

    vector<vector<float>> X;
    vector<float> y;
    for (const auto& d : data) {
        X.push_back({static_cast<float>(d.hr), static_cast<float>(d.dow), static_cast<float>(d.wknd),
                     d.temp, static_cast<float>(d.weather)});
        y.push_back(d.requests);
    }

    size_t n_train = static_cast<size_t>(data.size() * 0.8);
    vector<vector<float>> X_train(X.begin(), X.begin() + n_train);
    vector<vector<float>> X_test(X.begin() + n_train, X.end());
    vector<float> y_train(y.begin(), y.begin() + n_train);
    vector<float> y_test(y.begin() + n_train, y.end());

    model.fit(X_train, y_train);
    vector<float> y_pred = model.predict(X_test);

    float mae = 0.0f;
    float rmse = 0.0f;
    for (size_t i = 0; i < y_test.size(); ++i) {
        float err = y_test[i] - y_pred[i];
        mae += abs(err);
        rmse += err * err;
    }
    mae /= y_test.size();
    rmse = sqrt(rmse / y_test.size());

    cout << "MAE: " << mae << endl;
    cout << "RMSE: " << rmse << endl;

    // Step 3: Log evaluation metrics
    ofstream log("model_log.txt", ios::app);
    if (!log.is_open()) {
        cerr << "Error opening log file." << endl;
        return 1;
    }
    time_t t = time(0);
    tm* now = localtime(&t);
    log << now->tm_year + 1900 << "-" << now->tm_mon + 1 << "-" << now->tm_mday << " "
        << now->tm_hour << ":" << now->tm_min << ":" << now->tm_sec << " MAE: " << mae << ", RMSE: " << rmse << endl;
    log.close();

    return 0;
}
